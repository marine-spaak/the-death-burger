{"ast":null,"code":"\"use strict\";\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildAsyncRequire = void 0;\nvar loadBundle_1 = require(\"./loadBundle\");\nfunction buildAsyncRequire() {\n  var _universal_loadBundleAsync;\n  var cache = new Map();\n  return function universal_loadBundleAsync(_x) {\n    return (_universal_loadBundleAsync = _universal_loadBundleAsync || _asyncToGenerator(function* (path) {\n      if (cache.has(path)) {\n        return cache.get(path);\n      }\n      var promise = (0, loadBundle_1.loadBundleAsync)(path).catch(function (error) {\n        cache.delete(path);\n        throw error;\n      });\n      cache.set(path, promise);\n      return promise;\n    })).apply(this, arguments);\n  };\n}\nexports.buildAsyncRequire = buildAsyncRequire;","map":{"version":3,"names":["loadBundle_1","require","buildAsyncRequire","_universal_loadBundleAsync","cache","Map","universal_loadBundleAsync","_x","_asyncToGenerator","path","has","get","promise","loadBundleAsync","catch","error","delete","set","apply","arguments","exports"],"sources":["/var/www/html/postapo/reactnative/the-death-burger/node_modules/@expo/metro-runtime/src/async-require/buildAsyncRequire.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { loadBundleAsync } from \"./loadBundle\";\n\n/**\n * Must satisfy the requirements of the Metro bundler.\n * https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0605-lazy-bundling.md#__loadbundleasync-in-metro\n */\ntype AsyncRequire = (path: string) => Promise<void>;\n\n/** Create an `loadBundleAsync` function in the expected shape for Metro bundler. */\nexport function buildAsyncRequire(): AsyncRequire {\n  const cache = new Map<string, Promise<void>>();\n\n  return async function universal_loadBundleAsync(path: string): Promise<void> {\n    if (cache.has(path)) {\n      return cache.get(path)!;\n    }\n\n    const promise = loadBundleAsync(path).catch((error) => {\n      cache.delete(path);\n      throw error;\n    });\n\n    cache.set(path, promise);\n\n    return promise;\n  };\n}\n"],"mappings":";;;;;;AAOA,IAAAA,YAAA,GAAAC,OAAA;AASA,SAAgBC,iBAAiBA,CAAA;EAAA,IAAAC,0BAAA;EAC/B,IAAMC,KAAK,GAAG,IAAIC,GAAG,EAAyB;EAE9C,gBAAsBC,yBAAyBA,CAAAC,EAAA;IAAA,QAAAJ,0BAAA,GAAAA,0BAAA,IAAAK,iBAAA,CAAxC,WAAyCC,IAAY;MAC1D,IAAIL,KAAK,CAACM,GAAG,CAACD,IAAI,CAAC,EAAE;QACnB,OAAOL,KAAK,CAACO,GAAG,CAACF,IAAI,CAAE;;MAGzB,IAAMG,OAAO,GAAG,IAAAZ,YAAA,CAAAa,eAAe,EAACJ,IAAI,CAAC,CAACK,KAAK,CAAC,UAACC,KAAK,EAAI;QACpDX,KAAK,CAACY,MAAM,CAACP,IAAI,CAAC;QAClB,MAAMM,KAAK;MACb,CAAC,CAAC;MAEFX,KAAK,CAACa,GAAG,CAACR,IAAI,EAAEG,OAAO,CAAC;MAExB,OAAOA,OAAO;IAChB,CAAC,GAAAM,KAAA,OAAAC,SAAA;EAAA;AACH;AAjBAC,OAAA,CAAAlB,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}